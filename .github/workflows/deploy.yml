name: Deploy to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore src/Babylon.Alfred/Babylon.Alfred.sln

      - name: Build
        run: dotnet build src/Babylon.Alfred/Babylon.Alfred.sln --no-restore

      - name: Test
        run: dotnet test src/Babylon.Alfred/Babylon.Alfred.sln --no-build --verbosity normal

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infrastructure/environments/dev
          terraform init
          terraform plan -var-file="terraform.tfvars"
          terraform apply -var-file="terraform.tfvars" -auto-approve

      - name: Build and push Docker image
        run: |
          # Get ECR repository URL
          ECR_REPOSITORY=$(aws ecr describe-repositories --repository-names babylon-alfred-dev --query 'repositories[0].repositoryUri' --output text)

          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPOSITORY

          # Build and push
          docker build -t babylon-alfred-api -f src/Babylon.Alfred/Babylon.Alfred.Api/Dockerfile .
          docker tag babylon-alfred-api:latest $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:latest

          # Update ECS service
          aws ecs update-service --cluster babylon-alfred-dev-cluster --service babylon-alfred-dev-service --force-new-deployment

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infrastructure/environments/prod
          terraform init
          terraform plan -var-file="terraform.tfvars"
          terraform apply -var-file="terraform.tfvars" -auto-approve

      - name: Build and push Docker image
        run: |
          # Get ECR repository URL
          ECR_REPOSITORY=$(aws ecr describe-repositories --repository-names babylon-alfred-prod --query 'repositories[0].repositoryUri' --output text)

          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPOSITORY

          # Build and push
          docker build -t babylon-alfred-api -f src/Babylon.Alfred/Babylon.Alfred.Api/Dockerfile .
          docker tag babylon-alfred-api:latest $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:latest

          # Update ECS service
          aws ecs update-service --cluster babylon-alfred-prod-cluster --service babylon-alfred-prod-service --force-new-deployment
